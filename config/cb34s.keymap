/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
              ╰────────╯ ╰────────╯            
*/

#define BASE_LAYER 0
#define NAV_LAYER 1
#define NUM_UML_LAYER 2
#define BLE_LAYER 3

&caps_word {
   continue-list = <LSHIFT UNDERSCORE MINUS BSPC>; 
};

/ {

    macros {

	lambda_arrow: lambda_arrow {
            label = "lambda_arrow";
            compatible = "zmk,behavior-macro";
	    #binding-cells = <0>;
            wait-ms = <10>;
	    tap-ms = <10>;
	    bindings
	    = <&kp MINUS &kp GREATER_THAN>
	    ;
        };
	
    };

    combos {
        compatible = "zmk,combos"; 

        combo_lBrak {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp LBKT>;
        };

        combo_rBrak {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp RBKT>;
        };

        combo_lPar {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LPAR>;
        };
	
	combo_rPar {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RPAR>;
        };

	combo_at_sign {
            timeout-ms = <50>;
            key-positions = <1 11>;
            bindings = <&kp AT_SIGN>;
        };
	
	combo_hash {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp HASH>;
        };
	
	combo_dollar {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp DOLLAR>;
        };
	
	combo_ampersand {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp AMPS>;
        };
	
	combo_star {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp STAR>;
        };
	
	combo_backslash {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp BSLH>;
        };
	
	combo_questionmark {
            timeout-ms = <50>;
            key-positions = <6 17>;
            bindings = <&kp QMARK>;
        };
	
	combo_exclamation {
            timeout-ms = <25>;
            key-positions = <2 13>;
            bindings = <&kp EXCL>;
        };

// ------  second row ------------- 

        combo_del {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp DEL>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp TAB>;
        };
	
	combo_esc {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp ESC>;
        };
	
	combo_equals {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&kp EQUAL>;
        };
	
 	combo_grave {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp GRAVE>;
        };
 
        combo_enter {
            timeout-ms = <25>;
            key-positions = <16 17>;
            bindings = <&kp RET>;
        };

        combo_backspace {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp BSPC>;
        };
	
	combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
        };	
	
// ----- third row ----------------

        combo_lBrace {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp LEFT_BRACE>;
        };

        combo_rBrace {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RIGHT_BRACE>;
        };

        combo_cut {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp K_CUT>;
        };

        combo_copy {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp K_COPY>;
        };
	
        combo_paste {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp K_PASTE>;
        };
	
        combo_arrow {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&lambda_arrow>;
        };
	
        combo_bleLayer {
            timeout-ms = <125>;
            key-positions = <30 31>;
            bindings = <&mo BLE_LAYER>;
        };
	
    };
   
    
    behaviors {        
		hm_shift: homerow_mods_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS_SHIFT";
			#binding-cells = <2>;
			tapping_term_ms = <125>;
			quick_tap_ms = <200>;
			global-quick-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		
		hm_gui: homerow_mods_gui {
			compatible = "zmk,behavior-hold-tap";
			label = "HOMEROW_MODS_GUI";
			#binding-cells = <2>;
			tapping_term_ms = <175>;
			quick_tap_ms = <200>;
			global-quick-tap;
			flavor = "tap-preferred";
			bindings = <&kp>, <&kp>;
		};
		
		gqt: global-quick-tap {
		    compatible = "zmk,behavior-hold-tap";
		    label = "GLOBAL_QUICK_TAP";
		    #binding-cells = <2>;
		    flavor = "tap-preferred";
		    tapping-term-ms = <175>;
		    quick-tap-ms = <125>;
		    global-quick-tap;
		    retro-tap;
		    bindings = <&kp>, <&kp>;
		};
		
		morph_tab: morph_tab {
		    compatible = "zmk,behavior-mod-morph";
		    label = "MOD_MORPH";
		    #binding-cells = <0>;
		    bindings = <&lt NAV_LAYER SLASH>, <&kp TAB>;
		    mods = <(MOD_LGUI|MOD_LCTL|MOD_LALT)>;
		};


	};
 


    keymap {
       compatible = "zmk,keymap";

       BASE_LAYER {
          bindings = <
&kp Q           &kp F        &kp C         &kp K               &kp X                        &kp APOS  &kp W               &kp O         &kp U        &kp Z
&hm_gui LGUI R  &gqt LALT S  &gqt LCTRL T  &hm_shift LSHIFT H  &kp D                &kp V      &hm_shift LSHIFT N  &gqt LCTRL A  &gqt LALT I  &hm_gui LGUI L 
&none           &kp B      &kp G         &kp P               &kp COMMA                      &kp SEMI      &kp M               &kp DOT       &kp J    &kp Y
                                      &morph_tab  &lt NAV_LAYER SPACE                       &lt NUM_UML_LAYER E  &kp LC(BSPC)
                  >;
                };


       NAV_LAYER {
          bindings = <
  &none  &none  &none  &none  &none               &none    &none     &none   &none      &none
  &none  &none  &none  &none  &none        &kp LEFT &kp DOWN  &kp UP  &kp RIGHT  &none
  &none  &none  &none  &none  &none               &none    &none     &none   &none      &none
                        &none &none                &none  &kp LSHFT
                        >;
                };
/*
   NUMBER LAYER
  ╭────────────────────╮ ╭────────────────────╮
  │  *   9   8   7   | │ │ __  __   ö   ü  __ │
  │  &   3   2   1   + │ │ __  __   ä  __   ß │
  │  $   6   5   4   - │ │ __  __  __  __  __ │
  ╰───────────╮  _   0 │ │        ╭───────────╯
              ╰────────╯ ╰────────╯            
*/
       NUM_UML_LAYER {
          bindings = <
  &kp STAR  &kp N9  &kp N8  &kp N7  &kp PIPE2          &none  &none  &kp RA(P)  &kp RA(Y)  &none
  &kp AMPS  &kp N3  &kp N2  &kp N1  &kp PLUS        &none  &none  &kp RA(Q)  &none     &kp RA(S)
  &kp DOLLAR &kp N6  &kp N5  &kp N4  &kp MINUS          &none  &none  &none     &none      &none
               &kp UNDER &kp N0          &none &none
                        >;
                };

       BLE_LAYER {
          bindings = <
  &none        &none         &none         &bt BT_CLR     &none                 &none &none &none &none &none
  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1   &bt BT_SEL 0          &none &none &none &none &none
  &bootloader   &none         &none         &out OUT_USB   &none                 &none &none &none &none &none
                                              &none &none                        &none &none
                        >;
                };
   };
};
